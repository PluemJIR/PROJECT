{"ast":null,"code":"var _jsxFileName = \"/Users/pluemjir/Documents/CODECAMP ONLINE/Project/urlique-project/src/component/Form/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Input, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst RegistrationForm = () => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  };\n\n  const prefixSelector = /*#__PURE__*/_jsxDEV(Form.Item, {\n    name: \"prefix\",\n    noStyle: true,\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      style: {\n        width: 70\n      },\n      children: [/*#__PURE__*/_jsxDEV(Option, {\n        value: \"86\",\n        children: \"+86\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: \"87\",\n        children: \"+87\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: true,\n    children: /*#__PURE__*/_jsxDEV(Form, { ...formItemLayout,\n      form: form,\n      name: \"register\",\n      onFinish: onFinish,\n      scrollToFirstError: true,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, { ...formItemLayout,\n        name: \"name\",\n        label: \"Name\",\n        rules: [{\n          required: true,\n          message: 'Please input your name'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"username\",\n        label: \"Username\",\n        rules: [{\n          required: true,\n          message: 'Please input your username!',\n          whitespace: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        label: \"E-mail\",\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...formItemLayout,\n        name: \"hashtag\",\n        label: \"Hashtag\",\n        tooltip: \"Enter Something to find you easier\",\n        rules: [{\n          required: false,\n          message: 'Enter Something to find you easier!!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password\",\n        label: \"Password\",\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }],\n        hasFeedback: true,\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"confirm\",\n        label: \"Confirm Password\",\n        dependencies: ['password'],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('password') === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(new Error('The two passwords that you entered do not match!'));\n          }\n\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailFormItemLayout,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegistrationForm, \"TY8+cMsRaO9bLWjs4W3ddTl9qnU=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = RegistrationForm;\nexport default RegistrationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/Users/pluemjir/Documents/CODECAMP ONLINE/Project/urlique-project/src/component/Form/RegisterForm.js"],"names":["React","useState","Form","Input","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","form","useForm","onFinish","values","console","log","prefixSelector","width","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","value","map","domain","websiteOptions","website","label","required","message","whitespace","type","getFieldValue","validator","_","Promise","resolve","reject","Error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst { Option } = Select;\n  \nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    console.log('Received values of form: ', values);\n  };\n\n  const prefixSelector = (\n    <Form.Item name=\"prefix\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    </Form.Item>\n  );\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = (value) => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(['.com', '.org', '.net'].map((domain) => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map((website) => ({\n    label: website,\n    value: website,\n  }));\n\n\nreturn (\n    <div className>\n        <Form\n            {...formItemLayout}\n            form={form}\n            name=\"register\"\n            onFinish={onFinish}\n            scrollToFirstError\n        >\n            <Form.Item\n            {...formItemLayout}\n            name=\"name\"\n            label=\"Name\"\n            rules={[\n                {\n                required: true,\n                message: 'Please input your name',\n                },\n            ]}\n            >\n            <Input placeholder=\"\" />\n            </Form.Item>\n            <Form.Item\n                name=\"username\"\n                label=\"Username\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please input your username!',\n                    whitespace: true,\n                },\n                ]}\n            >\n            <Input />\n            </Form.Item>\n\n            <Form.Item\n            name=\"email\"\n            label=\"E-mail\"\n            rules={[\n                {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n                },\n                {\n                required: true,\n                message: 'Please input your E-mail!',\n                },\n            ]}\n            >\n            <Input />\n            </Form.Item>\n\n            <Form.Item\n            {...formItemLayout}\n            name=\"hashtag\"\n            label=\"Hashtag\"\n            tooltip=\"Enter Something to find you easier\"\n            rules={[\n                {\n                required: false,\n                message: 'Enter Something to find you easier!!',\n                },\n            ]}\n            >\n            <Input placeholder=\"\" />\n            </Form.Item>\n\n            <Form.Item\n            name=\"password\"\n            label=\"Password\"\n            rules={[\n                {\n                required: true,\n                message: 'Please input your password!',\n                },\n            ]}\n            hasFeedback\n            >\n            <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n            name=\"confirm\"\n            label=\"Confirm Password\"\n            dependencies={['password']}\n            hasFeedback\n            rules={[\n                {\n                required: true,\n                message: 'Please confirm your password!',\n                },\n                ({ getFieldValue }) => ({\n                validator(_, value) {\n                    if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve();\n                    }\n\n                    return Promise.reject(new Error('The two passwords that you entered do not match!'));\n                },\n                }),\n            ]}\n            >\n            <Input.Password />\n            </Form.Item>\n\n            <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n                Register\n            </Button>\n            </Form.Item>\n        </Form>\n    </div>\n);\n};\n\nexport default RegistrationForm"]},"metadata":{},"sourceType":"module"}